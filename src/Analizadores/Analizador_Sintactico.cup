/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones, paquetes
package Analizadores;
import java_cup.runtime.Symbol;

import Estructuras.Nodo;
import Estructuras.Arbol;
import Estructuras.RegularExpresion;
import Estructuras.error;
import Estructuras.Conjunto;
import Estructuras.Ejercicio;

import proyecto1.VentanaInterfaz;
import proyecto1.Proyecto1;

import java.util.LinkedList;

//------> Codigo para el parser,variables, metodos
parser code{:
        public String resultado = "";
        public static Nodo Raiz; 
        private static String NombreCONJ = "";
        public static String NombreArbol = "";
        public static int contadorhojas = 0;

        public static LinkedList<RegularExpresion> ListaArboles = new LinkedList<>();
        public static LinkedList<Conjunto> ListaConjuntos = new LinkedList<>();
        public static LinkedList<Ejercicio> ListaEjercicios = new LinkedList<>();
        public static LinkedList<String>Vconju = new LinkedList<>();
   /*     
        public void syntax_error(Symbol s)
        {
            System.err.println("Error en la Linea " + (s.right+1) +" Columna "+(s.left+1)+ ". Identificador "+s.value + " no reconocido. Se ha recuperado del error." );
            error nuevo = new error("Error Sintactico (Recuperado)", s.value.toString(), s.right+1, s.left+1);
            Proyecto1.iniciar.getListaerrores().add(nuevo);
        }
        
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            System.err.println("Error en la Linea " + (s.right+1)+ " Columna "+(s.left+1)+". Identificador " +s.value + " no reconocido.");
            error nuevo = new error("Error Sintactico", s.value.toString(), s.right+1, s.left+1);
            Proyecto1.iniciar.getListaerrores().add(nuevo);
        }
*/

        public LinkedList<RegularExpresion> getListaArboles(){
            return ListaArboles;
        }

        public LinkedList<Conjunto> getListaConjuntos(){
            return ListaConjuntos;
        }
        
        public LinkedList<Ejercicio> getListaEjercicios(){
            return ListaEjercicios;
        }
:}

//------> Codigo para las acciones gramaticales
action code
{:  :}




/*--------------- 2da Area: Declaraciones -----------------------*/

//------> declaracion de terminales 

terminal String Tk_cer_positiva, Tk_kleene, Tk_or, Tk_concat, Tk_llavea, Tk_llavec, Tk_CONJ, Tk_flecha0, Tk_flecha1, Tk_pcoma, Tk_valor_comillas, 
Tk_guion, Tk_inicio_Ejercicios, Tk_id, Tk_dosp, Tk_coma, Tk_caracter, Tk_digito, Tk_inter ;

//------> declaracion de no terminales
non terminal String INICIO;
non terminal String S, VAC;

non terminal RegularExpresion EXPRESIONES;//Expresiones regulares
non terminal Nodo EXP, IDEXP;

non terminal Conjunto CONJUNTOS; // conjuntos
non terminal Conjunto P;
non terminal LinkedList<String> VA, VAG;

non terminal LinkedList<Ejercicio> EJERCICIOS;// Ejercicios
non terminal Ejercicio EJ;

//------> precedencia de menor a mayor
/*
precedence left kleene, cpositiva;
precedence left or;
precedence left conc;
*/


start with INICIO;

/*--------------- 3ra Area: Reglas Semanticas -----------------------*/

INICIO::= Tk_llavea S Tk_llavec     {:  :} 
       ;

S ::=   CONJUNTOS:a                           {: parser.ListaConjuntos.add(a);:}
        | EXPRESIONES:a                       {: parser.ListaArboles.add(a);:}
	| EJERCICIOS:a                        {: :}
;
CONJUNTOS ::=   Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VA:b              {: RESULT = new Conjunto(b, a.toString()); :}
            | Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VA:b S              {: RESULT = new Conjunto(b, a.toString()); :}
            | Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VAG:b S             {: RESULT = new Conjunto(b, a.toString()); :}
            | Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VAG:b               {: RESULT = new Conjunto(b, a.toString()); :}
;       

EXPRESIONES ::= Tk_id:a Tk_flecha0 Tk_flecha1 EXP:b Tk_pcoma  S         {: RESULT = new RegularExpresion(new Arbol(b,parser.contadorhojas),a.toString()) ; :}
            | Tk_id:a Tk_flecha0 Tk_flecha1 EXP:b Tk_pcoma              {: RESULT = new RegularExpresion(new Arbol(b,parser.contadorhojas),a.toString()) ; :}
;


EJERCICIOS ::= Tk_inicio_Ejercicios Tk_inicio_Ejercicios EJ:a {: parser.ListaEjercicios.add(a);:}
;


/*     PARA CONJUNTOS:  */
VA ::=  Tk_digito:c VAC               {: parser.Vconju.add(c.toString()); parser.NombreCONJ = c.toString();:}
        | Tk_digito:c Tk_pcoma        {: RESULT= parser.Vconju; Vconju=new LinkedList<String>(); parser.NombreCONJ = c.toString();:}
 	| Tk_caracter:c VAC           {: parser.Vconju.add(c.toString()); parser.NombreCONJ = c.toString();:}
	| Tk_caracter:c Tk_pcoma      {: RESULT= parser.Vconju; Vconju=new LinkedList<String>(); parser.NombreCONJ = c.toString();:}
;


VAC ::= Tk_coma VA                  {::}
	
;

VAG ::= Tk_caracter:a Tk_guion Tk_caracter:b Tk_pcoma       {:  int ini = (int)a.toString().charAt(0); 
                                                            int finale = (int)b.toString().charAt(0); 
                                                            for(int i=ini; i<=finale; i++){ parser.Vconju.add(Character.toString((char) i)) ;}  
                                                            parser.Vconju=new LinkedList<String>();  :}
        |Tk_digito:a Tk_guion Tk_digito:b Tk_pcoma        {:  int ini = (int)a.toString().charAt(0); 
                                                            int finale = (int)b.toString().charAt(0); 
                                                            for(int i=ini; i<=finale; i++){ parser.Vconju.add(Character.toString((char) i)) ;}  
                                                            parser.Vconju=new LinkedList<String>();  :}
       |Tk_caracter:a Tk_guion Tk_digito:b Tk_pcoma          {:  int ini = (int)a.toString().charAt(0); 
                                                            int finale = (int)b.toString().charAt(0); 
                                                            for(int i=ini; i<=finale; i++){ parser.Vconju.add(Character.toString((char) i)) ;}  
                                                            parser.Vconju=new LinkedList<String>();  :}
       |Tk_digito:a Tk_guion Tk_caracter:b Tk_pcoma          {:  int ini = (int)a.toString().charAt(0); 
                                                            int finale = (int)b.toString().charAt(0); 
                                                            for(int i=ini; i<=finale; i++){ parser.Vconju.add(Character.toString((char) i)) ;}  
                                                            parser.Vconju=new LinkedList<String>();  :}
;

/*     PARA EXPRESIONES REGULARES:  */


EXP ::=  Tk_concat:b EXP:a EXP:c                {: boolean anulabilidad = false;
                                                if((a.anulable==true)&&(c.anulable==true)){ anulabilidad = true;}
                                                Nodo nuevo=new Nodo("Tk_concat", "", -1, a, c, anulabilidad);
                                                nuevo.Primerapos = a.Primerapos;
                                                if(a.anulable){
                                                for(int i=0;i<c.Primerapos.size();i++){ nuevo.Primerapos.add(c.Primerapos.get(i));}
                                                }
                                                nuevo.Ultimapos = a.Ultimapos;
                                                if(c.anulable){
                                                for(int i=0;i<c.Ultimapos.size();i++){ nuevo.Ultimapos.add(c.Ultimapos.get(i));}
                                                }
                                                RESULT = nuevo;
                                                :}

	| Tk_or:b EXP:a EXP:c                   {: boolean anulabilidad = false;
                                                if((a.anulable==true)||(c.anulable==true)){ anulabilidad = true;} 
                                                Nodo nuevo=new Nodo("Tk_or", "", -1, a, c , false);
                                                nuevo.Primerapos = a.Primerapos;
                                                for(int i=0;i<c.Primerapos.size();i++){ nuevo.Primerapos.add(c.Primerapos.get(i));}
                                                nuevo.Ultimapos = a.Ultimapos;
                                                for(int i=0;i<c.Ultimapos.size();i++){ nuevo.Ultimapos.add(c.Ultimapos.get(i));}
                                                RESULT = nuevo;
                                                :}

	| Tk_kleene:b EXP:a                     {: Nodo nuevo=new Nodo("Tk_kleene", "", -1, a, null , true);
                                                nuevo.Primerapos = a.Primerapos;
                                                nuevo.Ultimapos = a.Ultimapos;
                                                RESULT = nuevo;
                                                :}

	| Tk_cer_positiva:b EXP:a               {:Nodo nuevo=new Nodo("Tk_cer_positiva", "", -1, a, null , a.anulable); 
                                                nuevo.Primerapos = a.Primerapos;
                                                nuevo.Ultimapos = a.Ultimapos;
                                                RESULT = nuevo;
                                                :}

	| Tk_inter:b EXP:a                      {: 
                                                Nodo nuevo=new Nodo("Tk_inter", "", -1, a, null , true); 
                                                nuevo.Primerapos = a.Primerapos;
                                                nuevo.Ultimapos = a.Ultimapos;
                                                RESULT = nuevo;
                                                :}  

	| Tk_llavea:a IDEXP:b Tk_llavec:c       {: b.Primerapos.add(b.id); b.Ultimapos.add(b.id); RESULT=b;  :}
	| Tk_valor_comillas:a                   {: Nodo nuevo=new Nodo("Tk_valor_comillas", a.toString(), parser.contadorhojas, null, null, false); 
                                                nuevo.Primerapos.add(parser.contadorhojas); nuevo.Ultimapos.add(parser.contadorhojas); RESULT = nuevo; parser.contadorhojas++;:}
        | Tk_digito:a                           {: Nodo nuevo=new Nodo("Tk_caracter", a.toString(), parser.contadorhojas, null, null , false); 
                                                nuevo.Primerapos.add(parser.contadorhojas); nuevo.Ultimapos.add(parser.contadorhojas); RESULT = nuevo;  parser.contadorhojas++; :}
        | Tk_caracter:a                         {: Nodo nuevo =new Nodo("Tk_caracter", a.toString(), parser.contadorhojas, null, null , false);
                                                 nuevo.Primerapos.add(parser.contadorhojas); nuevo.Ultimapos.add(parser.contadorhojas); RESULT = nuevo; parser.contadorhojas++;:}

;
IDEXP ::= Tk_id:a       {:RESULT=new Nodo("Tk_id", a.toString(), parser.contadorhojas, null, null , false); parser.contadorhojas++; :}
;

/*     PARA EJERCICIOS EXPRESIONES REGULARES:  */

EJ ::=  Tk_id:a Tk_dosp Tk_valor_comillas:b Tk_pcoma  EJ    {: RESULT = new Ejercicio(b.toString(),a.toString());:}
        | Tk_id:a Tk_dosp Tk_valor_comillas:b Tk_pcoma      {: RESULT = new Ejercicio(b.toString(),a.toString());:}
        | P:a                                               {: parser.ListaConjuntos.add(a);:}
;


P ::=   Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VA:b EJ         {: RESULT = new Conjunto(b, a.toString()); :}
        | Tk_CONJ Tk_dosp Tk_id:a Tk_flecha0 Tk_flecha1 VA:b          {: RESULT = new Conjunto(b, a.toString()); :}
;

